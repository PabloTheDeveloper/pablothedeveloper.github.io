{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome # \u201cIt's never too late to be what you might have been.\u201d Welcome to my site :) Contained within is a collection of my works. At present state there may be a few sections left empty. It will be filled in at some point. Purpose # I have found writing to be an excellent tool for expression. Practically speaking, what one doesn't write one tends to forget. Writing further crystalizes understanding and serves as a cognitive tool to advance thinking. Really, these works save me time. Lastly, this world has unbrimming amounts of knowledge and fascinations. It would be tragic to not capture some portion. By trade I am no writer but everyone has something to say and a life worth writing about. Where to Next? # For fellow coders and software engineers head to the Coding section. For all others, browse per your interests. The Writing section could be interesting.","title":"Home"},{"location":"#welcome","text":"\u201cIt's never too late to be what you might have been.\u201d Welcome to my site :) Contained within is a collection of my works. At present state there may be a few sections left empty. It will be filled in at some point.","title":"Welcome"},{"location":"#purpose","text":"I have found writing to be an excellent tool for expression. Practically speaking, what one doesn't write one tends to forget. Writing further crystalizes understanding and serves as a cognitive tool to advance thinking. Really, these works save me time. Lastly, this world has unbrimming amounts of knowledge and fascinations. It would be tragic to not capture some portion. By trade I am no writer but everyone has something to say and a life worth writing about.","title":"Purpose"},{"location":"#where-to-next","text":"For fellow coders and software engineers head to the Coding section. For all others, browse per your interests. The Writing section could be interesting.","title":"Where to Next?"},{"location":"coding/","text":"Introduction # Eventually, I decided that thinking was not getting me very far and it was time to try building. I have many projects of the past, present, and future that will be documented in this section. Additionally, there will be a Changelog section where I log frequent developer notes. It would be a changelog of my experiences as a coder.","title":"Index"},{"location":"coding/#introduction","text":"Eventually, I decided that thinking was not getting me very far and it was time to try building. I have many projects of the past, present, and future that will be documented in this section. Additionally, there will be a Changelog section where I log frequent developer notes. It would be a changelog of my experiences as a coder.","title":"Introduction"},{"location":"coding/changelog/","text":"Defaulting To Scripts & Templates # Field Label Date 2025-05-01 Project Personal-Site Update Streaming Usage It really is true that with ease comes use. I have in fact uploaded to my personal site a bit more than I did a few months ago. To improve upon this, I've added a script to install & setup a local static site instance and another to deploy to Github. They are 5 liners each but it removes more friction. Now, I can run my scripts and have it deploy with ease. Before, I would have to read my README.md and copy paste commands I wrote there. Now, I don't need to do that. Considering I intend to write indefinitely, this should save me time. I've also updated my Nvim's init.lua config to inject templates to help write my entries. This is where my key-value tables are coming from. I'm hoping that maybe in the future I can use these tables but for now they serve as a way to view metadata about my entries. I've also added a markdown formatter and visualizer in my Nvim' init.lua. They will be helpful in viewing and editing text. Kerfuffle in Last Deployment # Field Label Date 2025-04-22 Project Personal-Site Update Deleted By Accident I had unintentionally deleted my project site files haha. No, it is not due to rm -rf being misplaced. It is due to how mkdocs gh-deploy will overwrite whatever directory it is in. This wasn't too bad as it took a few minutes to copy the file contents from the site back into markdown. It does make me want to update the mkdocs command to not overwrite without letting the user know what is going to be overwritten. I doubt many people have workflows in which they are intending to do that. It would help on the usability front. 50% Done w/ Personal Site # Field Label Date 2025-04-11 Project Personal-Site Update Massive Improvements Previously, my personal site had a single README.md with all my aspirations. During this update, I used mkdocs to make it nicer. Originally, my intentions were to use Golang to setup a static site but mkdocs does the job just fine. No reason to let perfect or a narrowed focus get in the way of making something useable. I suppose one barrier to making progress on this site was scheduling a regular time to make updates. I think there was some friction to update it as well. Now that I've reach a mostly editable and deployable state, I can proceed more easily. Hopefully with more edits. Eventually, I'll have to update this to use Docker instead of python's venv as I abhor installing local packages onto my development machine. No practical consequences will come from leaving it as is, but I don't prefer it.","title":"Changelog"},{"location":"coding/changelog/#defaulting-to-scripts-templates","text":"Field Label Date 2025-05-01 Project Personal-Site Update Streaming Usage It really is true that with ease comes use. I have in fact uploaded to my personal site a bit more than I did a few months ago. To improve upon this, I've added a script to install & setup a local static site instance and another to deploy to Github. They are 5 liners each but it removes more friction. Now, I can run my scripts and have it deploy with ease. Before, I would have to read my README.md and copy paste commands I wrote there. Now, I don't need to do that. Considering I intend to write indefinitely, this should save me time. I've also updated my Nvim's init.lua config to inject templates to help write my entries. This is where my key-value tables are coming from. I'm hoping that maybe in the future I can use these tables but for now they serve as a way to view metadata about my entries. I've also added a markdown formatter and visualizer in my Nvim' init.lua. They will be helpful in viewing and editing text.","title":"Defaulting To Scripts &amp; Templates"},{"location":"coding/changelog/#kerfuffle-in-last-deployment","text":"Field Label Date 2025-04-22 Project Personal-Site Update Deleted By Accident I had unintentionally deleted my project site files haha. No, it is not due to rm -rf being misplaced. It is due to how mkdocs gh-deploy will overwrite whatever directory it is in. This wasn't too bad as it took a few minutes to copy the file contents from the site back into markdown. It does make me want to update the mkdocs command to not overwrite without letting the user know what is going to be overwritten. I doubt many people have workflows in which they are intending to do that. It would help on the usability front.","title":"Kerfuffle in Last Deployment"},{"location":"coding/changelog/#50-done-w-personal-site","text":"Field Label Date 2025-04-11 Project Personal-Site Update Massive Improvements Previously, my personal site had a single README.md with all my aspirations. During this update, I used mkdocs to make it nicer. Originally, my intentions were to use Golang to setup a static site but mkdocs does the job just fine. No reason to let perfect or a narrowed focus get in the way of making something useable. I suppose one barrier to making progress on this site was scheduling a regular time to make updates. I think there was some friction to update it as well. Now that I've reach a mostly editable and deployable state, I can proceed more easily. Hopefully with more edits. Eventually, I'll have to update this to use Docker instead of python's venv as I abhor installing local packages onto my development machine. No practical consequences will come from leaving it as is, but I don't prefer it.","title":"50% Done w/ Personal Site"},{"location":"coding/projects/","text":"This page contains all my public projects. Attached to each heading is a link to either access the source code or a link to play around with the project. If a interactive site is present, it will always be attached to the Github page on the right sidebar. 2025 # Currently Planned Project(s) # Projects requested / I find interesting that I'll do at some point: Terminal-To-Web project # It really sucks that the easiest kinds of programs to write are near impossible to deploy as a website as is without converting the original script to JS or whatever frontend framework is popular at the time. https://github.com/cryptool-org/wasm-webterm provides one way to deploy terminal apps via wasm compilation. Club Penguin Fishing Game Clone. # This version will allow sprites to be swapped out with other sprites. This is to be done with Love2d for me to learn more about lua. Love2d is also best for 2d simple games. It was requested of me and I said I would so I will. Existing Project(s) # TODO(pablothedeveloper): implement a #Tldr; section for each project containing a demo, usage, and links to other docs. Flappy-Bird # Carbon # CLI # Personal-Site # Init-Me #","title":"Projects"},{"location":"coding/projects/#2025","text":"","title":"2025"},{"location":"coding/projects/#currently-planned-projects","text":"Projects requested / I find interesting that I'll do at some point:","title":"Currently Planned Project(s)"},{"location":"coding/projects/#terminal-to-web-project","text":"It really sucks that the easiest kinds of programs to write are near impossible to deploy as a website as is without converting the original script to JS or whatever frontend framework is popular at the time. https://github.com/cryptool-org/wasm-webterm provides one way to deploy terminal apps via wasm compilation.","title":"Terminal-To-Web project"},{"location":"coding/projects/#club-penguin-fishing-game-clone","text":"This version will allow sprites to be swapped out with other sprites. This is to be done with Love2d for me to learn more about lua. Love2d is also best for 2d simple games. It was requested of me and I said I would so I will.","title":"Club Penguin Fishing Game Clone."},{"location":"coding/projects/#existing-projects","text":"TODO(pablothedeveloper): implement a #Tldr; section for each project containing a demo, usage, and links to other docs.","title":"Existing Project(s)"},{"location":"coding/projects/#flappy-bird","text":"","title":"Flappy-Bird"},{"location":"coding/projects/#carbon","text":"","title":"Carbon"},{"location":"coding/projects/#cli","text":"","title":"CLI"},{"location":"coding/projects/#personal-site","text":"","title":"Personal-Site"},{"location":"coding/projects/#init-me","text":"","title":"Init-Me"},{"location":"hobbies/","text":"Introduction # What life is there without leasure? While still under work, these contained sections higlight what interests I have. I hope to catalog my experiences with them there.","title":"Index"},{"location":"hobbies/#introduction","text":"What life is there without leasure? While still under work, these contained sections higlight what interests I have. I hope to catalog my experiences with them there.","title":"Introduction"},{"location":"hobbies/cinematography/","text":"Arch Journal # Part 1 - Origins # Field Label Date 2025-04-26 Link Origins video I made on the fly to discuss some update to an old laptop.","title":"Cinematography"},{"location":"hobbies/cinematography/#arch-journal","text":"","title":"Arch Journal"},{"location":"hobbies/cinematography/#part-1-origins","text":"Field Label Date 2025-04-26 Link Origins video I made on the fly to discuss some update to an old laptop.","title":"Part 1 - Origins"},{"location":"volunteering/","text":"This page is about any volunteering I'm up to. In 2024 and 2025 it'll probably focus on cats.","title":"Index"},{"location":"volunteering/cats/","text":"Cats 101 # Date:2025-04-22 Cats can be shy creatures. I remember a few weeks ago the shelter had kittens who had not been well socialized with people yet. After doing the day to day, I sat on the floor in their enclosure to see what I could do. They cautiously observed this strange human sitting there with them. From the safety of their cubby-like furniture. A part of being a volunteer is that we need to interact with our cats. Cats, although mostly solitary, need some human interaction and general stimulation. In that, they aren't so different from people. Although people tend to need more. I didn't expect to make much progress but that isn't a reason to not try so that led me to sit there with them. I also waved a toy attached to some string in the air above them and on the floor. Not continously but occasionally. In this, my aim was to transform the toy into some animated creature that cats would pounce and chase after. A few minutes later, one of the kittens came out and started inspecting me. I didn't try to move. I let them smell and look at me. They came out and started playing with the toy. It was wonderful. I couldn't stay for too long but with that, my aim was accomplished. This little kitten was one step closer to being adopted and having a generally better life. By now that kitten and its brothers/sisters will have found a home. Perhaps it could have been my home but I believe my place in life right now is one that cares for animals rather than owns them. While I know at some point I'll foster/adopt a cat, maybe one I take care of at the shelter, for now this is enough.","title":"Cats"},{"location":"volunteering/cats/#cats-101","text":"Date:2025-04-22 Cats can be shy creatures. I remember a few weeks ago the shelter had kittens who had not been well socialized with people yet. After doing the day to day, I sat on the floor in their enclosure to see what I could do. They cautiously observed this strange human sitting there with them. From the safety of their cubby-like furniture. A part of being a volunteer is that we need to interact with our cats. Cats, although mostly solitary, need some human interaction and general stimulation. In that, they aren't so different from people. Although people tend to need more. I didn't expect to make much progress but that isn't a reason to not try so that led me to sit there with them. I also waved a toy attached to some string in the air above them and on the floor. Not continously but occasionally. In this, my aim was to transform the toy into some animated creature that cats would pounce and chase after. A few minutes later, one of the kittens came out and started inspecting me. I didn't try to move. I let them smell and look at me. They came out and started playing with the toy. It was wonderful. I couldn't stay for too long but with that, my aim was accomplished. This little kitten was one step closer to being adopted and having a generally better life. By now that kitten and its brothers/sisters will have found a home. Perhaps it could have been my home but I believe my place in life right now is one that cares for animals rather than owns them. While I know at some point I'll foster/adopt a cat, maybe one I take care of at the shelter, for now this is enough.","title":"Cats 101"},{"location":"writings/","text":"Introduction # Writing liberates the soul. In 50 years from now, I'd like to look fondly upon my experiences. For that aim, it is crucial to write about them or to live an intentional life worth reading about. Future sections will include Essays, Book reviews, and poems.","title":"Index"},{"location":"writings/#introduction","text":"Writing liberates the soul. In 50 years from now, I'd like to look fondly upon my experiences. For that aim, it is crucial to write about them or to live an intentional life worth reading about. Future sections will include Essays, Book reviews, and poems.","title":"Introduction"},{"location":"writings/reflections/","text":"%1 Better # Field Label Date 2025-05-01 Time 10:00 PM Spark Reflecting on speedups There is an extra benefit to making mundane tasks easier other than time saved. At some point, routine tasks become automatic and don't seem to exhaust anymore cognitive resources than mostly mindless tasks like walking and speaking. Yet, those tasks still occupy some portion of our minds. Furthermore they can request additional resources if the complexity deviates more than what was typically encountered. Of course, after some time of a new environment we acclimate to that complexity. A hiker thinks less of the rugged terrain they step on than a city dweller. But, if that hiker were to stop hiking for a few weeks or months their effort to walk amoungst that terrain would increase. Applying those ideas in a cognitively demanding landscape one could see how there is some merit to entirely eliminating or reducing mundanity. To acquire an aptitude in a routine task temporarily, only to forget, or to not apply in a generalizable manner those resulting abilities, does seem a waste or inefficient. With any practical programming ability one is able to skirt some of the slowdown but is not sensible to do so for all routine tasks. So then what tasks then are sensible? I feel that for myself the answer is that which I want to prioritize in life. Outside of family, friends, health, and career, the needs I have after are what I should focus on. That's the big picture. In practice, surprisingly there are few widely applicable insights I've encountered in my own journey of reducing friction. Guidelines on what to improve, what to really improve and where to stop. Lesson #1: Fail Early It is critical, that if one is trying anything, that there is some evaluation criteria on whether it is worth doing now, worth it later in the future, and then beyond. There are some tasks for which the payoff is at the end of much investment. Others bring yields earlier. Some tasks bring marginal yields at the start and then decline in value later (think about clean up tasks after trying out some organizational system). Everything has a cost and a benefit whose value fluctuates on different dimensions in non-linear, staggered ways. While it's not easy to predict, it is much easier to evaluate the past and see where to look next. Lesson #2: Usage is Validation If you find yourself regularly using your shortcut or improved process that's a great hint that something is working. Be mindful that there could be confounding external variables which influence it but most likely something about the new thing is working. Even if it's not globally optimal, the existance of a process actively followed is better than one intermidiately. Like a scientist, examine the causes and see which affordances are genuinely leading to more intentional behavior. Lesson #3: Short Feedback Loops > Long Feedback Loops It is easy to get emotionally invested in large projects and for those feelings to superceed practical concerns such as if it is worth continuing or if others are finding value in it. To be pigeonholed should be avoided but also be mindful that sometimes such projects are the ones that payout the most. A middle ground to reach is to create successively large subprojects that expand in function to the larger aim. This is where the concept of a MVP comes in. However, instead of one that is most fitting of the demands of a situation, it is barely that. The minimal part of mvp must be emphasized. It must be understood as barely functioning. It must be simple too, but no simpler than needed. Sometimes this means constraining the features and interaction but this is for the better. As primary users of our own systems, especially ones to cut down on routine/mundane tasks, we must use them. Otherwise is it a project thrown in the wrong direction. If a project is to be cancelled then the reasons why are equally as important as the reasons to continue if it were successful. Concluding thoughts I wouldn't list out all the ways I do this and all the tools and systems I've tried but there are a fair number. Some have sticked and others less so. While earlier in my journey I saw these speedup processes as a magical means to greater ability, and they certainly help, this is not the case. The habits of mind and the values one cultivates are far more helpful. Though, that doesn't mean that no effort should be dedicate to cut down on inefficiency. Secondly, new tools and systems which prior systems depend upon are always coming out. There is a lifespan to most optimizations one can try out. For me, I'm trying to dedicate my time to those that I can see myself using for a long time. I still dedicate time to those that may be short lived but I am aware of their lifespan. It is difficult to say what tasks are worth improving but for me, I find it fun to try. In that, it isn't as bad a loss if an approach doesn't work out. It teaches me what doesn't work and I get to learn some new way of thinking. Perhaps, framing optimizations in that way, can be helpful for other trying to optimize their lives too.","title":"Reflections"},{"location":"writings/reflections/#1-better","text":"Field Label Date 2025-05-01 Time 10:00 PM Spark Reflecting on speedups There is an extra benefit to making mundane tasks easier other than time saved. At some point, routine tasks become automatic and don't seem to exhaust anymore cognitive resources than mostly mindless tasks like walking and speaking. Yet, those tasks still occupy some portion of our minds. Furthermore they can request additional resources if the complexity deviates more than what was typically encountered. Of course, after some time of a new environment we acclimate to that complexity. A hiker thinks less of the rugged terrain they step on than a city dweller. But, if that hiker were to stop hiking for a few weeks or months their effort to walk amoungst that terrain would increase. Applying those ideas in a cognitively demanding landscape one could see how there is some merit to entirely eliminating or reducing mundanity. To acquire an aptitude in a routine task temporarily, only to forget, or to not apply in a generalizable manner those resulting abilities, does seem a waste or inefficient. With any practical programming ability one is able to skirt some of the slowdown but is not sensible to do so for all routine tasks. So then what tasks then are sensible? I feel that for myself the answer is that which I want to prioritize in life. Outside of family, friends, health, and career, the needs I have after are what I should focus on. That's the big picture. In practice, surprisingly there are few widely applicable insights I've encountered in my own journey of reducing friction. Guidelines on what to improve, what to really improve and where to stop. Lesson #1: Fail Early It is critical, that if one is trying anything, that there is some evaluation criteria on whether it is worth doing now, worth it later in the future, and then beyond. There are some tasks for which the payoff is at the end of much investment. Others bring yields earlier. Some tasks bring marginal yields at the start and then decline in value later (think about clean up tasks after trying out some organizational system). Everything has a cost and a benefit whose value fluctuates on different dimensions in non-linear, staggered ways. While it's not easy to predict, it is much easier to evaluate the past and see where to look next. Lesson #2: Usage is Validation If you find yourself regularly using your shortcut or improved process that's a great hint that something is working. Be mindful that there could be confounding external variables which influence it but most likely something about the new thing is working. Even if it's not globally optimal, the existance of a process actively followed is better than one intermidiately. Like a scientist, examine the causes and see which affordances are genuinely leading to more intentional behavior. Lesson #3: Short Feedback Loops > Long Feedback Loops It is easy to get emotionally invested in large projects and for those feelings to superceed practical concerns such as if it is worth continuing or if others are finding value in it. To be pigeonholed should be avoided but also be mindful that sometimes such projects are the ones that payout the most. A middle ground to reach is to create successively large subprojects that expand in function to the larger aim. This is where the concept of a MVP comes in. However, instead of one that is most fitting of the demands of a situation, it is barely that. The minimal part of mvp must be emphasized. It must be understood as barely functioning. It must be simple too, but no simpler than needed. Sometimes this means constraining the features and interaction but this is for the better. As primary users of our own systems, especially ones to cut down on routine/mundane tasks, we must use them. Otherwise is it a project thrown in the wrong direction. If a project is to be cancelled then the reasons why are equally as important as the reasons to continue if it were successful. Concluding thoughts I wouldn't list out all the ways I do this and all the tools and systems I've tried but there are a fair number. Some have sticked and others less so. While earlier in my journey I saw these speedup processes as a magical means to greater ability, and they certainly help, this is not the case. The habits of mind and the values one cultivates are far more helpful. Though, that doesn't mean that no effort should be dedicate to cut down on inefficiency. Secondly, new tools and systems which prior systems depend upon are always coming out. There is a lifespan to most optimizations one can try out. For me, I'm trying to dedicate my time to those that I can see myself using for a long time. I still dedicate time to those that may be short lived but I am aware of their lifespan. It is difficult to say what tasks are worth improving but for me, I find it fun to try. In that, it isn't as bad a loss if an approach doesn't work out. It teaches me what doesn't work and I get to learn some new way of thinking. Perhaps, framing optimizations in that way, can be helpful for other trying to optimize their lives too.","title":"%1 Better"}]}